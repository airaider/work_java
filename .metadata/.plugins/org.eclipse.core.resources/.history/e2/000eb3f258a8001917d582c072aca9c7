package dfs;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class dfs_13460 {
	static int[][] m;
	static int N;
	static int M;
	public static void main(String[] args) throws NumberFormatException, IOException {
		// TODO Auto-generated method stub
		BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
		String line;
		String delimiter = " ";
        StringTokenizer tokenizer;
        line=in.readLine();
        tokenizer = new StringTokenizer(line, delimiter);
		N=Integer.parseInt(tokenizer.nextToken());
		M=Integer.parseInt(tokenizer.nextToken());
		System.out.println(N);
		System.out.println(M);
		m = new int [N][N];
		for (int i = 0; i < M; i++) {
			line = in.readLine();
			tokenizer = new StringTokenizer(line, delimiter);
			int a=Integer.parseInt(tokenizer.nextToken());
			int b=Integer.parseInt(tokenizer.nextToken());
			m[a-1][b-1]=1;
		}
		dfs();
	}

	private static void dfs() {
		// TODO Auto-generated method stub
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				System.out.printf("%d ", m[i][j]);
			}
			System.out.printf("\n");
		}
		
	}

}
