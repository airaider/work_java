package dfs;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class dfs_11724 {
	static int[][] m;
	static int N;
	static int M;
	static int cnt=0;
	static int[] visit; 
	public static void main(String[] args) throws NumberFormatException, IOException {
		// TODO Auto-generated method stub
		BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
		String line;
		String delimiter = " ";
        StringTokenizer tokenizer;
        line=in.readLine();
        tokenizer = new StringTokenizer(line, delimiter);
		N=Integer.parseInt(tokenizer.nextToken());
		M=Integer.parseInt(tokenizer.nextToken());
		System.out.println(N);
		System.out.println(M);
		m = new int [N+1][N+1];
		visit = new int[N+1];
		for (int i = 0; i < M; i++) {
			line = in.readLine();
			tokenizer = new StringTokenizer(line, delimiter);
			int a=Integer.parseInt(tokenizer.nextToken());
			int b=Integer.parseInt(tokenizer.nextToken());
			m[a][b]=1;
			m[b][a]=1;
		}
		for (int i = 1; i <= N ; i++) { //i is a index of node to visit
            if(visit[i] == 0){
                cnt++;
                dfs(i);
            }
        }
		show();
		System.out.println();
		System.out.println();
		show();
		System.out.println();
		System.out.println(cnt);
	}

	private static void show() {
		// TODO Auto-generated method stub
		for (int i = 1; i < N+1; i++) {
			for (int j = 1; j < N+1; j++) {
				System.out.printf("%d ", m[i][j]);
			}
			System.out.printf("\n");
		}
	}

	private static void dfs(int k) {
		visit[k]=cnt;
		for(int i = 1; i <= N; i++) {
			if(visit[i]==0 && m[k][i]==1) {
				dfs(i);
				
			}
		}
	}

}
